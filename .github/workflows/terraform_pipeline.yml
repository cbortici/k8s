name: Terraform test

on: 
  workflow_dispatch:

jobs:
  inform_about_apply:
    name: Inform About Apply
    runs-on: ubuntu-20.04

    steps:
      - name: Inform on PR that Apply is Running
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.TEST }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ***Running terraform apply***
            Results will display here momentarily...

  plan_and_apply:
    name: Plan and Apply
    # env:
    #   TF_VAR_allowed_account_id: ${{ secrets.ALLOWED_ACCOUNT_ID }}
    runs-on: ubuntu-20.04
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     path:
    #       - dev
    #       - stage
    #       - prod

    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Setup helm
        uses: azure/setup-helm@v4.2.0

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          aws-access-key-id: ${{ secrets.ID }}
          aws-secret-access-key: ${{ secrets.SECRET }}

      - name: Initialize Terraform
        run: |
            cd boex/boex_dev_terraform
            terraform init -reconfigure -backend-config="bucket=boexstfstatebucket" -backend-config="key=boexterraform.tfstate" -backend-config="region=eu-central-1"

      - name: Plan Terraform
        id: plan
        # continue-on-error: true
        run: |
          export TF_VAR_aws_secret_key=${{ secrets.SECRET }}
          export TF_VAR_aws_access_key=${{ secrets.ID }}
          cd boex/boex_dev_terraform
          set +e
          terraform plan -detailed-exitcode -input=false
          set -e
          if [ $exit_code -eq 2 ]; then
            echo "There are pending changes."
            exit 0
          elif [ $exit_code -eq 0 ]; then
            echo "No changes detected in the Terraform plan."
            exit 0
          fi
        

      # Sed is taking all lines that begin with one or more spaces followed by a `+` or `-`.
      # It stores the amount of spaces in `\1` and the +/- in `\2`.
      # Then replace that portion of the line with `\2\1` (+/- followed by the number of matched spaces).
      - name: Reformat Plan
        if: steps.plan.outcome == 'success'
        run: |
          echo '${{ steps.plan.outputs.stderr }}' > plan.txt

      - name: Put Plan in Env Var
        if: steps.plan.outcome == 'success'
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Apply Terraform
        if: steps.plan.outcome == 'success'
        id: apply
        run: |
          export TF_VAR_aws_secret_key=${{ secrets.SECRET }}
          export TF_VAR_aws_access_key=${{ secrets.ID }}
          cd boex/boex_dev_terraform
          if terraform apply --auto-approve -no-color;
          then
          echo "First Terraform build"
          else          
          terraform apply -target=module.rancher-server.local_file.kube_config_server_yaml --auto-approve
          terraform apply -target=module.rancher-server.local_file.kube_config_workload_yaml --auto-approve
          terraform apply --auto-approve -no-color
          fi
          base64 kube_config_server.yaml > server
          base64 kube_config_workload.yaml > workload
          server=$(cat server)
          workload=$(cat workload)
          echo "::set-output name=server::$server"
          echo "::set-output name=workload::$workload"
          while terraform destroy --auto-approve; [[ $? -ne 0 ]];
          do
          echo "Result unsuccessful"
          sleep 1
          done
          echo "successfully destroyed"
      - uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: 'SERVER'
          value: '$server'
          repository: 'cbortici/k8s'
          token: ${{ secrets.TEST }}
      - uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: 'WORKLOAD'
          value: '$workload'
          repository: 'cbortici/k8s'
          token: ${{ secrets.TEST }}

      - name: Post Plan and Apply to GitHub PR
        if: steps.plan.outcome == 'success' && steps.apply.outcome == 'success'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.TEST }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            Applying **PROD**:

            ```diff
            echo ${{ env.PLAN }} no errors
            ```

            ```
            ${{ steps.apply.outputs.stdout }}
            ```

      - name: Post Plan Failure
        if: steps.plan.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.TEST }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            Plan failed for **PROD**:

            ```
            ${{ steps.plan.outputs.stderr }}
            ```

      - name: Post Apply Failure
        if: steps.apply.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.TEST }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            Apply failed for **PROD**:

            ```
            ${{ steps.apply.outputs.stderr }}
            ```