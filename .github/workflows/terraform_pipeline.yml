name: Terraform test

on: 
  workflow_dispatch:

jobs:
  inform_about_apply:
    name: Inform About Apply
    runs-on: ubuntu-20.04

    steps:
      - name: Inform on PR that Apply is Running
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.TEST }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ***Running terraform apply***
            Results will display here momentarily...

  plan_and_apply:
    name: Plan and Apply
    # env:
    #   TF_VAR_allowed_account_id: ${{ secrets.ALLOWED_ACCOUNT_ID }}
    runs-on: ubuntu-20.04
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     path:
    #       - dev
    #       - stage
    #       - prod

    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Setup helm
        uses: azure/setup-helm@v4.2.0

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-central-1
          aws-access-key-id: ${{ secrets.ID }}
          aws-secret-access-key: ${{ secrets.SECRET }}

      - name: Initialize Terraform
        run: |
            cd boex/boex_dev_terraform
            terraform init -reconfigure -backend-config="bucket=boexstfstatebucket" -backend-config="key=boexterraform.tfstate" -backend-config="region=eu-central-1"

      - name: Plan Terraform
        id: plan
        continue-on-error: true
        run: |
          export TF_VAR_aws_secret_key=${{ secrets.SECRET }}
          export TF_VAR_aws_access_key=${{ secrets.ID }}
          cd boex/boex_dev_terraform
          # echo "${{ secrets.SERVER }}" | base64 --decode > kube_config_server.yaml
          # echo "${{ secrets.WORKLOAD }}" | base64 --decode > kube_config_workload.yaml
          ls -l
          set +e
          terraform plan -detailed-exitcode -input=false -out=tfplan
          exit_code=$?
          set -e
          if [ $exit_code -eq 1 ]; then
            echo "There are pending changes."
            exit 0
          fi
        

      # Sed is taking all lines that begin with one or more spaces followed by a `+` or `-`.
      # It stores the amount of spaces in `\1` and the +/- in `\2`.
      # Then replace that portion of the line with `\2\1` (+/- followed by the number of matched spaces).
      - name: Reformat Plan
        if: steps.plan.outcome == 'success'
        run: |
          echo '${{ steps.plan.outputs.stderr }}' > plan.txt

      - name: Put Plan in Env Var
        if: steps.plan.outcome == 'success'
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Apply Terraform
        if: steps.plan.outcome == 'success'
        id: apply
        run: |
          export TF_VAR_aws_secret_key=${{ secrets.SECRET }}
          export TF_VAR_aws_access_key=${{ secrets.ID }}
          cd boex/boex_dev_terraform
          # terraform apply \
          #   -input=false \
          #   -no-color \
          #   tfplan
          # base64 kube_config_server.yaml > server
          # base64 kube_config_workload.yaml > workload
          # server=$(cat server)
          # workload=$(cat workload)
          # echo "::set-output name=server::$server"
          # echo "::set-output name=workload::$workload"
          echo "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnCmNsdXN0ZXJzOgotIG5hbWU6ICJsb2NhbCIKICBjbHVzdGVyOgogICAgc2VydmVyOiAiaHR0cHM6Ly9yYW5jaGVyLjM1LjE2Ni44NC4xOTIuc3NsaXAuaW8vazhzL2NsdXN0ZXJzL2xvY2FsIgogICAgY2VydGlmaWNhdGUtYXV0aG9yaXR5LWRhdGE6ICJMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VKMmFrTkRRXAogICAgICBWZFBaMEYzU1VKQlowbENRVVJCUzBKblozRm9hMnBQVUZGUlJFRnFRa2ROVW5kM1IyZFpSRlpSVVV0RmVFNXJaVmMxYUdKWGJHb0tZXAogICAgICBrZHNlbVJIVm5WYVdFbDBZak5LYmsxVFdYZEtRVmxFVmxGUlJFUkNNV3RsVnpWb1lsZHNhbUpIYkhwa1IxWjFXbGhKZEZreVJrRk5WXAogICAgICBHTjRUbXBKTlFwUFJFbDNUMFJCWlVaM01IbE9SRUV4VFdwRmVFMTZUWGROUkdoaFJuY3dlazVFUVRGTlZHdDRUWHBOZDAxRWFHRk5SXAogICAgICBWbDRTRVJCWVVKblRsWkNRVzlVQ2tVeVVqVmliVVowWVZkT2MyRllUakJhVnpWc1kya3hkbU50WTNoS2FrRnJRbWRPVmtKQlRVMUlWXAogICAgICAxSTFZbTFHZEdGWFRuTmhXRTR3V2xjMWJHTnBNV29LV1ZWQmVFNTZSVEpOYW1zMFRXcEJORTFHYTNkRmQxbElTMjlhU1hwcU1FTkJVXAogICAgICBWbEpTMjlhU1hwcU1FUkJVV05FVVdkQlJUVmthelZwZFU1S2RHSmlZd3BXT0dvM1NrSnlRbE50U1ZaRk16ZHFhV3RhV2xOcmFFWXlSXAogICAgICBIcHFja1ZXUzJaTVJ6RTBWRGQxUmxkTmFrdFpUVTAwTTNkbmJYSnBWblJMUlU1SVdHb3dDbXRNTTFGYWVXOHpiR0ZPUTAxRlFYZEVaXAogICAgICAxbEVWbEl3VUVGUlNDOUNRVkZFUVdkTGEwMUJPRWRCTVZWa1JYZEZRaTkzVVVaTlFVMUNRV1k0ZDBoUldVUUtWbEl3VDBKQ1dVVkdUXAogICAgICAxYzRTMEUzUVV0TE9HMXdUa1ZrZFhGb0swSjRMMU4yYjJwUlRVRnZSME5EY1VkVFRUUTVRa0ZOUTBFd2EwRk5SVmxEU1ZGRGJncHFWXAogICAgICAwZzNTa0UzVGtKNGNuWm9Ubk5tVUcxME9Ya3JVelp1ZWxnNVUzcFFkWGhSVlRKQmRURlBPVUZKYUVGUFVEUTFUbk5aV1RsdU5uaEpkXAogICAgICBWQnlZazQxQ25KUVYweDRkRU13Ymsxc1JHOXpPVEJSWTFJMGJXWjVVd290TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHQiCgp1c2VyczoKLSBuYW1lOiAibG9jYWwiCiAgdXNlcjoKICAgIHRva2VuOiAia3ViZWNvbmZpZy11c2VyLWt4d2x0OXJqazI6bHZibXNsMmJtMm5sY3Nrd3h2bms4ZGprNDhyYmI0OW50bGZmd3Z0cjI3bnRzaGR2eG16dm5oIgoKCmNvbnRleHRzOgotIG5hbWU6ICJsb2NhbCIKICBjb250ZXh0OgogICAgdXNlcjogImxvY2FsIgogICAgY2x1c3RlcjogImxvY2FsIgoKY3VycmVudC1jb250ZXh0OiAibG9jYWwiCg==" | base64 --decode > kube_config_server.yaml
          # echo "::set-output name=server::${{ secrets.SERVER }}"
          echo "YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnCmNsdXN0ZXJzOgotIG5hbWU6ICJjbHVzdGVyLWs4cyIKICBjbHVzdGVyOgogICAgc2VydmVyOiAiaHR0cHM6Ly9yYW5jaGVyLjM1LjE2Ni44NC4xOTIuc3NsaXAuaW8vazhzL2NsdXN0ZXJzL2MtbS12cGZ0Yzd3ayIKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiAiTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVSjJha05EUVwKICAgICAgVmRQWjBGM1NVSkJaMGxDUVVSQlMwSm5aM0ZvYTJwUFVGRlJSRUZxUWtkTlVuZDNSMmRaUkZaUlVVdEZlRTVyWlZjMWFHSlhiR29LWVwKICAgICAga2RzZW1SSFZuVmFXRWwwWWpOS2JrMVRXWGRLUVZsRVZsRlJSRVJDTVd0bFZ6Vm9ZbGRzYW1KSGJIcGtSMVoxV2xoSmRGa3lSa0ZOVlwKICAgICAgR040VG1wSk5RcFBSRWwzVDBSQlpVWjNNSGxPUkVFeFRXcEZlRTE2VFhkTlJHaGhSbmN3ZWs1RVFURk5WR3Q0VFhwTmQwMUVhR0ZOUlwKICAgICAgVmw0U0VSQllVSm5UbFpDUVc5VUNrVXlValZpYlVaMFlWZE9jMkZZVGpCYVZ6VnNZMmt4ZG1OdFkzaEtha0ZyUW1kT1ZrSkJUVTFJVlwKICAgICAgMUkxWW0xR2RHRlhUbk5oV0U0d1dsYzFiR05wTVdvS1dWVkJlRTU2UlRKTmFtczBUV3BCTkUxR2EzZEZkMWxJUzI5YVNYcHFNRU5CVVwKICAgICAgVmxKUzI5YVNYcHFNRVJCVVdORVVXZEJSVFZrYXpWcGRVNUtkR0ppWXdwV09HbzNTa0p5UWxOdFNWWkZNemRxYVd0YVdsTnJhRVl5UlwKICAgICAgSHBxY2tWV1MyWk1SekUwVkRkMVJsZE5ha3RaVFUwME0zZG5iWEpwVm5STFJVNUlXR293Q210TU0xRmFlVzh6YkdGT1EwMUZRWGRFWlwKICAgICAgMWxFVmxJd1VFRlJTQzlDUVZGRVFXZExhMDFCT0VkQk1WVmtSWGRGUWk5M1VVWk5RVTFDUVdZNGQwaFJXVVFLVmxJd1QwSkNXVVZHVFwKICAgICAgMWM0UzBFM1FVdExPRzF3VGtWa2RYRm9LMEo0TDFOMmIycFJUVUZ2UjBORGNVZFRUVFE1UWtGTlEwRXdhMEZOUlZsRFNWRkRiZ3BxVlwKICAgICAgMGczU2tFM1RrSjRjblpvVG5ObVVHMTBPWGtyVXpadWVsZzVVM3BRZFhoUlZUSkJkVEZQT1VGSmFFRlBVRFExVG5OWldUbHVObmhKZFwKICAgICAgVkJ5WWs0MUNuSlFWMHg0ZEVNd2JrMXNSRzl6T1RCUlkxSTBiV1o1VXdvdExTMHRMVVZPUkNCRFJWSlVTVVpKUTBGVVJTMHRMUzB0IgoKdXNlcnM6Ci0gbmFtZTogImNsdXN0ZXItazhzIgogIHVzZXI6CiAgICB0b2tlbjogImt1YmVjb25maWctdXNlci1reHdsdDVwOHhjOnJrbjI1MnF4NGY0aGRndDk0d2I4dHc4NXp2OGtwYzh6azc1YnN6d2hjNmJ0bndqZ3pzMjRiNCIKCgpjb250ZXh0czoKLSBuYW1lOiAiY2x1c3Rlci1rOHMiCiAgY29udGV4dDoKICAgIHVzZXI6ICJjbHVzdGVyLWs4cyIKICAgIGNsdXN0ZXI6ICJjbHVzdGVyLWs4cyIKCmN1cnJlbnQtY29udGV4dDogImNsdXN0ZXItazhzIgo=" | base64 --decode > kube_config_workload.yaml
          # echo "::set-output name=workload::${{ secrets.WORKLOAD }}"
          # ls
          # cat kube_config_server.yaml
          # cat kube_config_workload.yaml
          # echo "added on ${{steps.apply.outputs.workload}}"
          terraform apply --auto-approve
          # base64 kube_config_server.yaml > server
          # base64 kube_config_workload.yaml > workload
          # server=$(cat server)
          # workload=$(cat workload)
          # echo "::set-output name=server::$server"
          # echo "::set-output name=workload::$workload"
          # cat server
          # cat workload
          # terraform apply -target=module.rancher-server.local_file.kube_config_server_yaml --auto-approve
          # terraform apply -target=module.rancher-server.local_file.kube_config_workload_yaml --auto-approve
          # terraform apply --auto-approve
          # echo "${{ secrets.SERVER }}" | base64 --decode > kube_config_server.yaml
          # echo "${{ secrets.WORKLOAD }}" | base64 --decode > kube_config_workload.yaml
          # while terraform destroy --auto-approve; [[ $? -ne 0 ]];
          # do
          # echo "Result unsuccessful"
          # sleep 1
          # done
          # echo "successfully destroyed"
      # - uses: hmanzur/actions-set-secret@v2.0.0
      #   with:
      #     name: 'SERVER'
      #     value: '$server'
      #     repository: 'cbortici/k8s'
      #     token: ${{ secrets.TEST }}
      # - uses: hmanzur/actions-set-secret@v2.0.0
      #   with:
      #     name: 'WORKLOAD'
      #     value: '$workload'
      #     repository: 'cbortici/k8s'
      #     token: ${{ secrets.TEST }}

      - name: Post Plan and Apply to GitHub PR
        if: steps.plan.outcome == 'success' && steps.apply.outcome == 'success'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.TEST }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            Applying **PROD**:

            ```diff
            echo ${{ env.PLAN }} no errors
            ```

            ```
            ${{ steps.apply.outputs.stdout }}
            ```

      - name: Post Plan Failure
        if: steps.plan.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.TEST }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            Plan failed for **PROD**:

            ```
            ${{ steps.plan.outputs.stderr }}
            ```

      - name: Post Apply Failure
        if: steps.apply.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.TEST }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            Apply failed for **PROD**:

            ```
            ${{ steps.apply.outputs.stderr }}
            ```